
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.*;
import java.io.File;
import java.io.FileOutputStream;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Nikhil
 */

public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    DataInputStream din;
    DataOutputStream dout;
    BufferedReader br;
    String str = "", filename = "";
    Socket s;
    boolean isconnect = false;
    String check = "true";
    String path;
    DefaultListModel dlm=new DefaultListModel();

    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        Connnect = new javax.swing.JButton();
        ip1 = new javax.swing.JTextField();
        ip = new javax.swing.JLabel();
        fname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Delete = new javax.swing.JButton();
        Rename = new javax.swing.JButton();
        Quit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nname = new javax.swing.JTextField();
        uname = new javax.swing.JTextField();
        Browser = new javax.swing.JButton();
        Upload = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayArea = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        Display = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Connnect.setText("Connect");
        Connnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnnectActionPerformed(evt);
            }
        });

        ip.setText("Ip Address");

        jLabel1.setText("Filename");

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Rename.setText("Rename");
        Rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenameActionPerformed(evt);
            }
        });

        Quit.setText("Quit");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });

        jLabel2.setText("New File name:");

        Browser.setText("Borwse");
        Browser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowserActionPerformed(evt);
            }
        });

        Upload.setText("Upload");
        Upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadActionPerformed(evt);
            }
        });

        jLabel3.setText("Upload File name");

        jScrollPane1.setViewportView(DisplayArea);

        jLabel4.setText("Message :");

        Display.setText("Display");
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(Quit))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Browser)
                                .addGap(18, 18, 18)
                                .addComponent(Upload)))
                        .addContainerGap(77, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jButton1)
                                        .addGap(18, 18, 18)
                                        .addComponent(Display)))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43)
                                        .addComponent(Rename))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ip)
                                .addGap(29, 29, 29)
                                .addComponent(ip1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(Connnect)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Connnect)
                    .addComponent(ip1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ip))
                .addGap(2, 2, 2)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browser)
                    .addComponent(Upload))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Rename)
                    .addComponent(Display))
                .addGap(8, 8, 8)
                .addComponent(Quit)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        //download
        if (isconnect) {
            try {
                str = fname.getText();
               
                try {
                    String c = "down";
                    // dout.writeUTF(check);
                    // dout.flush();
                    dout.writeUTF(c);
                    dout.flush();
                    
                    dout.writeUTF(str);
                    dout.flush();
                } catch (IOException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }

                dlm.addElement("Receving file: " + str);
                String r=din.readUTF();
                if(r.equals("1"))
                {
                dlm.addElement("Saving as file: " + str);
                //
                long sz = Long.parseLong(din.readUTF());
                dlm.addElement("File Size: " + (sz / (1024 * 1024)) + " MB");

                byte b[] = new byte[1024];
                dlm.addElement("Receving file..");
                FileOutputStream fos = new FileOutputStream(new File(str), true);
                long bytesRead;
                do {
                    bytesRead = din.read(b, 0, b.length);
                    fos.write(b, 0, b.length);
                } while (!(bytesRead < 1024));
                dlm.addElement("Comleted");
                fos.close();
                }else{
                    dlm.addElement("Please Enter The File Name correctlly"); 
                }

            } catch (Exception e) {
                //do nothing
            }
        }
        else{
            dlm.addElement("Not Connected To server");
        }
        
        DisplayArea.setModel(dlm);
        displayfull();
        fname.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ConnnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnnectActionPerformed
        // TODO add your handling code here:
        
        String address = "";
        dlm.addElement("Entered Server Address: "+(ip1.getText()));
        address = ip1.getText();
        if(!address.equals("")){
        try {
            //create the socket on port 5000
            s = new Socket(address, 6982);
            din = new DataInputStream(s.getInputStream());
            dout = new DataOutputStream(s.getOutputStream());
            br = new BufferedReader(new InputStreamReader(System.in));
            dlm.addElement("Connected to Server");
            dlm.addElement("Send Get to start...");
            isconnect=true;
        } catch (IOException ex) {
             dlm.addElement("Server Not Found");
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
           
        }
        }else{
            dlm.addElement("Please Enter the ip");
        }
        DisplayArea.setModel(dlm);
        displayfull();

    }//GEN-LAST:event_ConnnectActionPerformed

    private void RenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenameActionPerformed
        // TODO add your handling code here:
        System.out.println(isconnect);
        if(isconnect){ 
        String c = "rename";
           String ch = null;
        try {
            // dout.writeUTF(check);
            // dout.flush();
            dout.writeUTF(c);dout.flush();
            str=fname.getText();
            String nename=nname.getText();
            dout.writeUTF(str);
            dout.writeUTF(nename);
            ch=din.readUTF();
            System.out.println(ch);
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(ch);
        if(ch.equals("1")){
        dlm.addElement("Successfully Rename");    
        }
        else
            dlm.addElement("Please Enter The File Name correctlly");
        }else
        {
          dlm.addElement("Not COnnected to the server");
        }
        DisplayArea.setModel(dlm);
        displayfull();
        fname.setText("");
        nname.setText("");
    }//GEN-LAST:event_RenameActionPerformed

    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionPerformed
        if(isconnect){
        try {
            // TODO add your handling code here:
            check = "false";
            dout.writeUTF(check);
            dout.flush();
            s.close();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }System.exit(0);
        }else{
            System.exit(0);
        }
        
    }//GEN-LAST:event_QuitActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        System.out.println(isconnect);
        if(isconnect){
        String c = "delete";
        String ch = null;
        try {
            // dout.writeUTF(check);
            // dout.flush();
            dout.writeUTF(c);dout.flush();
            str=fname.getText();
            dout.writeUTF(str);
            ch=din.readUTF();
            System.out.println(ch);
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(ch);
        if(ch.equals("1")){
        dlm.addElement("Successfully Deleted");    
        }
        else
            dlm.addElement("Please Enter The File Name correctlly"); 
        }else
            dlm.addElement("Not connected to the server");
         DisplayArea.setModel(dlm);
        displayfull();
        fname.setText("");
    }//GEN-LAST:event_DeleteActionPerformed

    private void BrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowserActionPerformed
        // TODO add your handling code here:
    
         JFileChooser ch = new JFileChooser();
        ch.showOpenDialog(null);
        File f = ch.getSelectedFile();
        path=f.getAbsolutePath();
        uname.setText(path);
        
    }//GEN-LAST:event_BrowserActionPerformed
void displayfull(){
        DisplayArea.ensureIndexIsVisible(dlm.getSize()-1);
    }
    private void UploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadActionPerformed
        // TODO add your handling code here:
           
         System.out.println(isconnect);
         if(isconnect){
        String pat=uname.getText();
        if(pat.equals(""))
        {
            dlm.addElement("Pllease enter the path correctlly");
        }else
            dlm.addElement("Enter path is "+pat);
           
            String c = "upload";
            File  f = new File(pat);
            
            try {
           String name=f.getName();
           System.out.println(name);
            dout.writeUTF(c);dout.flush();
            dout.writeUTF(name);
            dout.flush();
           String ch= din.readUTF();
           if(ch.equals("1"))
           {
            FileInputStream fin = new FileInputStream(f);
            long sz = (int) f.length();

            byte b[] = new byte[1024];

            int read;

            dout.writeUTF(Long.toString(sz));
            dout.flush();

            dlm.addElement("Size: " + sz);
            dlm.addElement("Buf size: " + s.getReceiveBufferSize());

            while ((read = fin.read(b)) != -1) {
                dout.write(b, 0, read);
                dout.flush();
            }
            fin.close();

            dlm.addElement("..ok");
            dout.flush();

            dout.writeUTF("stop");
            dlm.addElement("Send Complete");
            dout.flush();
           }
           else{
               dlm.addElement("File Already Exist");
           }
        } catch (Exception e) {
            e.printStackTrace();
            dlm.addElement("An error occured");
        }
        
        }else{
            uname.setText("");
            dlm.addElement("Please connect to the server");
        }
          DisplayArea.setModel(dlm);
        displayfull();
    }//GEN-LAST:event_UploadActionPerformed

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed
        // TODO add your handling code here:
         if(isconnect){ 
        String c = "display";
           String ch = null;
           int len= 0;
        try {
            // dout.writeUTF(check);
            // dout.flush();
            dout.writeUTF(c);dout.flush();
            len=din.readInt();
            for(int i=0;i<len;i++){
                dlm.addElement(din.readUTF());
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
         }
         else{
            dlm.addElement("Please connect to the server");
        }

        DisplayArea.setModel(dlm);
        displayfull();
    }//GEN-LAST:event_DisplayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browser;
    private javax.swing.JButton Connnect;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Display;
    private javax.swing.JList<String> DisplayArea;
    private javax.swing.JButton Quit;
    private javax.swing.JButton Rename;
    private javax.swing.JButton Upload;
    private javax.swing.JTextField fname;
    private javax.swing.JLabel ip;
    private javax.swing.JTextField ip1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nname;
    private javax.swing.JTextField uname;
    // End of variables declaration//GEN-END:variables
}
